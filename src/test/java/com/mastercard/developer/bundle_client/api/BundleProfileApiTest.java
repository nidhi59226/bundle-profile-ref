/*
 * Bundle Profile API
 * MC product bundle profile
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Digital_Enablement_Team_3@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.bundle_client.api;

import com.mastercard.developer.bundle_client.ApiException;
import com.mastercard.developer.bundle_client.model.BundleUser;
import com.mastercard.developer.bundle_client.model.BundleUserPatch;
import com.mastercard.developer.bundle_client.model.BundleUserResponse;
import com.mastercard.developer.bundle_client.model.Errors;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BundleProfileApi
 */
@Ignore
public class BundleProfileApiTest {

    private final BundleProfileApi api = new BundleProfileApi();

    
    /**
     * Create Profile
     *
     * Create Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        BundleUser body = null;
        String xClientCorrelationId = null;
        BundleUserResponse response = api.createUser(body, xClientCorrelationId);

        // TODO: test validations
    }
    
    /**
     * Partially Update Profile
     *
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String userId = null;
        BundleUserPatch body = null;
        String xClientCorrelationId = null;
        BundleUserResponse response = api.patchUser(userId, body, xClientCorrelationId);

        // TODO: test validations
    }
    
    /**
     * Find Consent by Id and product
     *
     * Returns a Consent on the basis of provided id, product as path params (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsentTest() throws ApiException {
        String userId = null;
        String product = null;
        String xClientCorrelationId = null;
        BundleUserResponse response = api.readConsent(userId, product, xClientCorrelationId);

        // TODO: test validations
    }
    
    /**
     * Find User by Id
     *
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserTest() throws ApiException {
        String userId = null;
        String xClientCorrelationId = null;
        BundleUserResponse response = api.readUser(userId, xClientCorrelationId);

        // TODO: test validations
    }
    
}
