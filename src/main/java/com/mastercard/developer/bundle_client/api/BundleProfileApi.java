/*
 * Bundle Profile API
 * MC product bundle profile
 *
 * The version of the OpenAPI document: 1.0
 * Contact: Digital_Enablement_Team_3@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.bundle_client.api;

import com.mastercard.developer.bundle_client.ApiCallback;
import com.mastercard.developer.bundle_client.ApiClient;
import com.mastercard.developer.bundle_client.ApiException;
import com.mastercard.developer.bundle_client.ApiResponse;
import com.mastercard.developer.bundle_client.Configuration;
import com.mastercard.developer.bundle_client.Pair;
import com.mastercard.developer.bundle_client.ProgressRequestBody;
import com.mastercard.developer.bundle_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.bundle_client.model.BundleUser;
import com.mastercard.developer.bundle_client.model.BundleUserPatch;
import com.mastercard.developer.bundle_client.model.BundleUserResponse;
import com.mastercard.developer.bundle_client.model.Errors;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BundleProfileApi {
    private ApiClient localVarApiClient;

    private static String RESOURCE_URL_PREFIX = "apiexplorer/bundle/profile";

    public BundleProfileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BundleProfileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createUser
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create resource with messages </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful create resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(BundleUser body, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientCorrelationId != null) {
            localVarHeaderParams.put("x-client-correlation-id", localVarApiClient.parameterToString(xClientCorrelationId));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(BundleUser body, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(body, xClientCorrelationId, _callback);
        return localVarCall;

    }

    /**
     * Create Profile
     * Create Profile user and associated product service(s) consents and card account(s)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return BundleUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create resource with messages </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful create resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BundleUserResponse createUser(BundleUser body, String xClientCorrelationId) throws ApiException {
        ApiResponse<BundleUserResponse> localVarResp = createUserWithHttpInfo(body, xClientCorrelationId);
        return localVarResp.getData();
    }

    /**
     * Create Profile
     * Create Profile user and associated product service(s) consents and card account(s)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return ApiResponse&lt;BundleUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create resource with messages </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful create resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleUserResponse> createUserWithHttpInfo(BundleUser body, String xClientCorrelationId) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(body, xClientCorrelationId, null);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Profile (asynchronously)
     * Create Profile user and associated product service(s) consents and card account(s)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create resource with messages </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successful create resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(BundleUser body, String xClientCorrelationId, final ApiCallback<BundleUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(body, xClientCorrelationId, _callback);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchUser
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUserCall(String userId, BundleUserPatch body, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX + "/users/{user_id}/patch"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientCorrelationId != null) {
            localVarHeaderParams.put("x-client-correlation-id", localVarApiClient.parameterToString(xClientCorrelationId));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchUserValidateBeforeCall(String userId, BundleUserPatch body, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling patchUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchUser(Async)");
        }
        

        okhttp3.Call localVarCall = patchUserCall(userId, body, xClientCorrelationId, _callback);
        return localVarCall;

    }

    /**
     * Partially Update Profile
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return BundleUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BundleUserResponse patchUser(String userId, BundleUserPatch body, String xClientCorrelationId) throws ApiException {
        ApiResponse<BundleUserResponse> localVarResp = patchUserWithHttpInfo(userId, body, xClientCorrelationId);
        return localVarResp.getData();
    }

    /**
     * Partially Update Profile
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return ApiResponse&lt;BundleUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleUserResponse> patchUserWithHttpInfo(String userId, BundleUserPatch body, String xClientCorrelationId) throws ApiException {
        okhttp3.Call localVarCall = patchUserValidateBeforeCall(userId, body, xClientCorrelationId, null);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Partially Update Profile (asynchronously)
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param body Bundle Profile body (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchUserAsync(String userId, BundleUserPatch body, String xClientCorrelationId, final ApiCallback<BundleUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchUserValidateBeforeCall(userId, body, xClientCorrelationId, _callback);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readConsent
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case. Ex - User123Z (required)
     * @param product product identifier (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readConsentCall(String userId, String product, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX + "/users/{user_id}/products/{product}/consents"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "product" + "\\}", localVarApiClient.escapeString(product.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientCorrelationId != null) {
            localVarHeaderParams.put("x-client-correlation-id", localVarApiClient.parameterToString(xClientCorrelationId));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readConsentValidateBeforeCall(String userId, String product, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling readConsent(Async)");
        }
        
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling readConsent(Async)");
        }
        

        okhttp3.Call localVarCall = readConsentCall(userId, product, xClientCorrelationId, _callback);
        return localVarCall;

    }

    /**
     * Find Consent by Id and product
     * Returns a Consent on the basis of provided id, product as path params (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case. Ex - User123Z (required)
     * @param product product identifier (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return BundleUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BundleUserResponse readConsent(String userId, String product, String xClientCorrelationId) throws ApiException {
        ApiResponse<BundleUserResponse> localVarResp = readConsentWithHttpInfo(userId, product, xClientCorrelationId);
        return localVarResp.getData();
    }

    /**
     * Find Consent by Id and product
     * Returns a Consent on the basis of provided id, product as path params (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case. Ex - User123Z (required)
     * @param product product identifier (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return ApiResponse&lt;BundleUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleUserResponse> readConsentWithHttpInfo(String userId, String product, String xClientCorrelationId) throws ApiException {
        okhttp3.Call localVarCall = readConsentValidateBeforeCall(userId, product, xClientCorrelationId, null);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find Consent by Id and product (asynchronously)
     * Returns a Consent on the basis of provided id, product as path params (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case. Ex - User123Z (required)
     * @param product product identifier (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readConsentAsync(String userId, String product, String xClientCorrelationId, final ApiCallback<BundleUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readConsentValidateBeforeCall(userId, product, xClientCorrelationId, _callback);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readUser
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readUserCall(String userId, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX + "/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xClientCorrelationId != null) {
            localVarHeaderParams.put("x-client-correlation-id", localVarApiClient.parameterToString(xClientCorrelationId));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readUserValidateBeforeCall(String userId, String xClientCorrelationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling readUser(Async)");
        }
        

        okhttp3.Call localVarCall = readUserCall(userId, xClientCorrelationId, _callback);
        return localVarCall;

    }

    /**
     * Find User by Id
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return BundleUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public BundleUserResponse readUser(String userId, String xClientCorrelationId) throws ApiException {
        ApiResponse<BundleUserResponse> localVarResp = readUserWithHttpInfo(userId, xClientCorrelationId);
        return localVarResp.getData();
    }

    /**
     * Find User by Id
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @return ApiResponse&lt;BundleUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BundleUserResponse> readUserWithHttpInfo(String userId, String xClientCorrelationId) throws ApiException {
        okhttp3.Call localVarCall = readUserValidateBeforeCall(userId, xClientCorrelationId, null);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find User by Id (asynchronously)
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     * @param userId Opaque identifier for the consumer. Issuer/Acquirer to send it complies to IETF RFC2396; MC provisions it depends on the use case, such as user123-partnerBank (required)
     * @param xClientCorrelationId Unique request identifier from the client, usually a Version 4 UUID string (36 characters long including dashes, such as \&quot;f6fd03c6-2dfe-46ea-99f9-6fd7bc34d8d8\&quot;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read resource with messages </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readUserAsync(String userId, String xClientCorrelationId, final ApiCallback<BundleUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readUserValidateBeforeCall(userId, xClientCorrelationId, _callback);
        Type localVarReturnType = new TypeToken<BundleUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
